---
import { getPublishedPosts } from '../../utils/posts';
import type { CollectionEntry } from 'astro:content';
import FullWidth from '../../layouts/FullWidth.astro';
import ArticleFooter from '../../components/article/ArticleFooter.astro';

export interface Props {
	post: CollectionEntry<'posts'>;
}

export async function getStaticPaths() {
  const publishedPosts = await getPublishedPosts();
  return publishedPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props as Props;
const { Content } = await post.render();

let fullTitle = post.data.title;

if (post.data.subtitle) {
  fullTitle = `${post.data.title}: ${post.data.subtitle}`;
}

const title = post.data.title
const description = post.data.description
const image = post.data.image

---

<FullWidth title={title} description={description} image={image} post={post.data}>
  <div class="prose max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Back to Blog Navigation -->
    <div class="mb-8">
      <a
        href="/blog"
        class="inline-flex items-center text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Blog
      </a>
    </div>

    <!-- Article Header -->
    <header class="mb-8">
      <div class="mb-4">
        {post.data.category && (
          <span class="inline-block bg-blue-100 text-blue-800 text-sm font-medium px-3 py-1 rounded-full mb-2">
            {post.data.category}
          </span>
        )}
      </div>

      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
        {post.data.title}
      </h1>

      {post.data.description && (
        <blockquote class="text-sm text-gray-600 dark:text-gray-300 mb-6 leading-relaxed">
          {post.data.description}
        </blockquote>
      )}


      <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-6">
        <time datetime={post.data.pubDate.toISOString()}>
          {post.data.pubDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
      </div>

      {post.data.tags && post.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-6">
          {post.data.tags.map((tag) => (
            <a
              href={`/tag/${tag.toLowerCase()}`}
              class="inline-block bg-gray-100 text-gray-700 text-sm px-3 py-1 rounded-full hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 transition-colors"
            >
              #{tag}
            </a>
          ))}
        </div>
      )}
    </header>

    <!-- Article Content -->
    <article class="prose prose-lg max-w-none dark:prose-invert">
      <Content />
    </article>

    <ArticleFooter title={post.data.title} />
  </div>
</FullWidth>