---
// ThemeToggle component with iOS-style sliding toggle

import { Moon, Sun } from  '@lucide/astro'
---

<div class="flex items-center">
  <button
    id="theme-toggle"
    type="button"
    class:list={[
      'relative inline-flex h-6 w-11 items-center rounded-full transition-colors',
      'hover:ring-1 hover:ring-blue-500 dark:hover:ring-offset-gray-900',
      'cursor-pointer',
    ]}
    aria-label="Toggle dark mode"
    data-theme="auto"
  >
    <!-- Toggle track -->
    <span class="inline-block h-6 w-11 rounded-full bg-gray-200 dark:bg-gray-700 transition-colors"></span>

    <!-- Toggle thumb -->
    <span class="absolute left-0.5 inline-block h-5 w-5 transform rounded-full bg-white shadow-lg ring-0 transition-transform duration-200 ease-in-out dark:translate-x-5 dark:bg-gray-300"></span>

    <!-- Sun icon (light mode) -->
    <Sun class="absolute left-[5px] top-[5px] h-3.5 w-3.5 text-yellow-500 opacity-100 transition-opacity duration-200 dark:opacity-0" />

    <!-- Moon icon (dark mode) -->
    <Moon class="absolute right-[5px] top-[5px] h-3.5 w-3.5 text-blue-400 opacity-0 transition-opacity duration-200 dark:opacity-100" />
  </button>
</div>

<script>
  class ThemeManager {
    private currentTheme: 'auto' | 'light' | 'dark';

    constructor() {
      this.currentTheme = this.getSavedTheme() || this.getSystemTheme();
    }

    init() {
      // Check for saved theme preference
      const savedTheme = this.getSavedTheme();
      if (savedTheme) {
        this.currentTheme = savedTheme;
        this.applyTheme(savedTheme);
      } else {
        // Check system preference
        this.currentTheme = this.getSystemTheme();
        this.applyTheme(this.currentTheme);
      }

      // Update toggle state
      this.updateToggleState();

      const toggleElem = this.getToggle();

      if (!toggleElem) {
        console.error('Toggle element not found');
      } else {
        // Add event listener
        this.getToggle()?.addEventListener('click', () => this.toggleTheme());
      }
    }

    getToggle(): HTMLElement | null {
      return document.getElementById('theme-toggle');
    }

    getSavedTheme(): 'auto' | 'light' | 'dark' | null {
      const saved = localStorage.getItem('theme-preference');
      if (!saved) return null;

      try {
        const data = JSON.parse(saved);
        const now = Date.now();

        // Check if preference has expired (12 hours = 43200000 ms)
        if (now - data.timestamp > 43200000) {
          localStorage.removeItem('theme-preference');
          return null;
        }

        return data.theme;
      } catch {
        localStorage.removeItem('theme-preference');
        return null;
      }
    }

    saveTheme(theme: 'auto' | 'light' | 'dark'): void {
      const data = {
        theme,
        timestamp: Date.now()
      };
      localStorage.setItem('theme-preference', JSON.stringify(data));
    }

    getSystemTheme(): 'light' | 'dark' {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    applyTheme(theme: 'auto' | 'light' | 'dark'): void {
      const html = document.documentElement;

      if (theme === 'dark' || (theme === 'auto' && this.getSystemTheme() === 'dark')) {
        html.classList.add('dark');
        this.getToggle()?.setAttribute('data-theme', 'dark');
      } else {
        html.classList.remove('dark');
        this.getToggle()?.setAttribute('data-theme', 'light');
      }
    }

    updateToggleState(): void {
      if (!this.getToggle()) return;

      const isDark = document.documentElement.classList.contains('dark');
      this.getToggle()?.setAttribute('data-theme', isDark ? 'dark' : 'light');
    }

    toggleTheme(): void {
      // Cycle through: auto -> light -> dark -> auto
      const themes: ('auto' | 'light' | 'dark')[] = ['auto', 'light', 'dark'];
      const currentIndex = themes.indexOf(this.currentTheme);
      const nextIndex = (currentIndex + 1) % themes.length;
      let newTheme = themes[nextIndex];

      // Prevent setting to 'auto', which looks like nothing has happened on toggle click
      if (newTheme === 'auto') {
        newTheme = 'light';
      }

      this.currentTheme = newTheme;
      this.applyTheme(newTheme);
      this.updateToggleState();
      this.saveTheme(newTheme);
    }
  }

  const globalThemeManager = new ThemeManager();

  // Listen for page transitions
  document.addEventListener('astro:page-load', () => {
    globalThemeManager.init();
  });

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    // Only apply system preference if user hasn't set a manual preference
    const savedTheme = localStorage.getItem('theme-preference');

    if (!savedTheme) {
      globalThemeManager.applyTheme('auto');
      globalThemeManager.updateToggleState();
    }
  });
</script>
