---
// ThemeToggle component with iOS-style sliding toggle
---

<div class="flex items-center">
  <button
    id="theme-toggle"
    type="button"
    class="relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-0 focus:ring-offset-0 focus:ring-blue-500 dark:focus:ring-offset-gray-900 disabled:opacity-35"
    aria-label="Toggle dark mode"
    data-theme="auto"

  >
    <!-- Toggle track -->
    <span class="inline-block h-6 w-11 rounded-full bg-gray-200 dark:bg-gray-700 transition-colors"></span>

    <!-- Toggle thumb -->
    <span class="absolute left-0.5 inline-block h-5 w-5 transform rounded-full bg-white shadow-lg ring-0 transition-transform duration-200 ease-in-out dark:translate-x-5 dark:bg-gray-300"></span>

    <!-- Sun icon (light mode) -->
    <svg class="absolute left-[4px] top-[4.5px]  h-4 w-4 text-yellow-500 opacity-100 transition-opacity duration-200 dark:opacity-0" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
    </svg>

    <!-- Moon icon (dark mode) -->
    <svg class="absolute left-[25px] top-[4.5px] h-4 w-4 text-blue-400 opacity-0 transition-opacity duration-200 dark:opacity-100" fill="currentColor" viewBox="0 0 20 20">
      <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
    </svg>
  </button>
</div>

<script>
  class ThemeManager {
    private toggle: HTMLElement | null;
    private currentTheme: 'auto' | 'light' | 'dark';

    constructor() {
      this.toggle = document.getElementById('theme-toggle');
      this.currentTheme = 'auto';
      this.init();
    }

    init() {
      // Check for saved theme preference
      const savedTheme = this.getSavedTheme();
      if (savedTheme) {
        this.currentTheme = savedTheme;
        this.applyTheme(savedTheme);
      } else {
        // Check system preference
        this.currentTheme = this.getSystemTheme();
        this.applyTheme(this.currentTheme);
      }

      // Update toggle state
      this.updateToggleState();

      // Add event listener
      this.toggle?.addEventListener('click', () => this.toggleTheme());
    }

    getSavedTheme(): 'auto' | 'light' | 'dark' | null {
      const saved = localStorage.getItem('theme-preference');
      if (!saved) return null;

      try {
        const data = JSON.parse(saved);
        const now = Date.now();

        // Check if preference has expired (12 hours = 43200000 ms)
        if (now - data.timestamp > 43200000) {
          localStorage.removeItem('theme-preference');
          return null;
        }

        return data.theme;
      } catch {
        localStorage.removeItem('theme-preference');
        return null;
      }
    }

    saveTheme(theme: 'auto' | 'light' | 'dark'): void {
      const data = {
        theme,
        timestamp: Date.now()
      };
      localStorage.setItem('theme-preference', JSON.stringify(data));
    }

    getSystemTheme(): 'light' | 'dark' {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    applyTheme(theme: 'auto' | 'light' | 'dark'): void {
      const html = document.documentElement;

      if (theme === 'dark' || (theme === 'auto' && this.getSystemTheme() === 'dark')) {
        html.classList.add('dark');
        this.toggle?.setAttribute('data-theme', 'dark');
      } else {
        html.classList.remove('dark');
        this.toggle?.setAttribute('data-theme', 'light');
      }
    }

    updateToggleState(): void {
      if (!this.toggle) return;

      const isDark = document.documentElement.classList.contains('dark');
      this.toggle.setAttribute('data-theme', isDark ? 'dark' : 'light');
    }

    toggleTheme(): void {
      // Cycle through: auto -> light -> dark -> auto
      const themes: ('auto' | 'light' | 'dark')[] = ['auto', 'light', 'dark'];
      const currentIndex = themes.indexOf(this.currentTheme);
      const nextIndex = (currentIndex + 1) % themes.length;
      let newTheme = themes[nextIndex];

      // Prevent setting to 'auto', which looks like nothing has happened on toggle click
      if (newTheme === 'auto') {
        newTheme = 'light';
      }

      this.currentTheme = newTheme;
      this.applyTheme(newTheme);
      this.updateToggleState();
      this.saveTheme(newTheme);
    }
  }

  // Initialize theme manager when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeManager());
  } else {
    new ThemeManager();
  }

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    // Only apply system preference if user hasn't set a manual preference
    const savedTheme = localStorage.getItem('theme-preference');
    if (!savedTheme) {
      const themeManager = new ThemeManager();
      themeManager.applyTheme('auto');
      themeManager.updateToggleState();
    }
  });
</script>
