---
import type { CollectionEntry } from 'astro:content';
import TechnologyBadge from './TechnologyBadge.astro';

interface Props {
  entry: CollectionEntry<'work'>;
}

const { entry } = Astro.props;
---

{entry.data.technologies && entry.data.technologies.length > 0 && (
  <div>
    <div class="flex justify-between items-center mb-3">
      <h4 class="text-lg font-semibold text-gray-900 dark:text-white">
        Technologies
      </h4>
      <button
        id={`expand-tech-${entry.id}`}
        class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
        data-expanded="false"
      >
        Expand
      </button>
    </div>

    <div
      id={`tech-container-${entry.id}`}
      class="flex flex-wrap gap-2 transition-all duration-300"
    >
      {entry.data.technologies.map((tech: any, index: number) => {
        const techName = typeof tech === 'string' ? tech : tech.name;
        const techDescription = typeof tech === 'string' ? null : tech.description;
        const techType = typeof tech === 'string' ? null : tech.type;

        return (
          <div
            id={`tech-item-${entry.id}-${index}`}
            class="tech-item"
            data-description={techDescription || ''}
          >
            <TechnologyBadge
              tech={{
                name: techName,
                type: techType,
                description: techDescription
              }}
              workType={entry.data.type}
            />
          </div>
        );
      })}
    </div>
  </div>
)}

<script>
  // Get all expand buttons
  const expandButtons = document.querySelectorAll('[id^="expand-tech-"]');

  expandButtons.forEach((button: Element) => {
    button.addEventListener('click', (event) => {
      const target = event.target as HTMLButtonElement;
      const isExpanded = target.getAttribute('data-expanded') === 'true';
      const entryId = target.id.replace('expand-tech-', '');
      const container = document.getElementById(`tech-container-${entryId}`);
      const techItems = container?.querySelectorAll('.tech-item');

      if (!container || !techItems) return;

      if (isExpanded) {
        // Collapse back to flex layout
        target.textContent = 'Expand';
        target.setAttribute('data-expanded', 'false');
        container.className = 'flex flex-wrap gap-2 transition-all duration-300';

        // Clear table and restore original tech items
        container.innerHTML = '';
        techItems.forEach(item => {
          item.className = 'tech-item';
          container.appendChild(item);

          // Re-enable tooltips
          const tooltip = item.querySelector('.tech-tooltip');
          if (tooltip) {
            tooltip.classList.remove('hidden');
            tooltip.classList.add('group-hover:opacity-100');
          }
        });
      } else {
        // Expand to table layout
        target.textContent = 'Collapse';
        target.setAttribute('data-expanded', 'true');
        container.className = 'transition-all duration-300';

        // Create table structure
        const table = document.createElement('table');
        table.className = 'w-full border-collapse text-sm min-w-full';

        // Create a wrapper div for horizontal scrolling on small screens
        const tableWrapper = document.createElement('div');
        tableWrapper.className = 'overflow-x-auto border border-gray-200 dark:border-gray-700 rounded-lg';

        // Add table header
        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');
        headerRow.className = 'border-b-2 border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800';

        const techHeader = document.createElement('th');
        techHeader.className = 'text-left py-3 px-4 font-medium text-gray-900 dark:text-white whitespace-nowrap';
        techHeader.textContent = 'Technology';

        const descHeader = document.createElement('th');
        descHeader.className = 'text-left py-3 px-4 font-medium text-gray-900 dark:text-white';
        descHeader.textContent = 'Description';

        headerRow.appendChild(techHeader);
        headerRow.appendChild(descHeader);
        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Create table body
        const tbody = document.createElement('tbody');

        techItems.forEach(item => {
          const description = item.getAttribute('data-description');

          // Create table row
          const row = document.createElement('tr');
          row.className = 'border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50';

          // Create technology cell
          const techCell = document.createElement('td');
          techCell.className = 'py-3 px-4 align-top whitespace-nowrap';
          techCell.appendChild(item.querySelector('.tech-badge')?.cloneNode(true) || item.cloneNode(true));

          // Create description cell
          const descCell = document.createElement('td');
          descCell.className = 'py-3 px-4 text-sm text-gray-600 dark:text-gray-400 leading-relaxed';

          if (description) {
            descCell.textContent = description;
          }

          row.appendChild(techCell);
          row.appendChild(descCell);
          tbody.appendChild(row);
        });

        table.appendChild(tbody);
        tableWrapper.appendChild(table);

        // Clear container and add table wrapper
        container.innerHTML = '';
        container.appendChild(tableWrapper);

        // Disable tooltips when expanded
        techItems.forEach(item => {
          const tooltip = item.querySelector('.tech-tooltip');
          if (tooltip) {
            tooltip.classList.add('hidden');
            tooltip.classList.remove('group-hover:opacity-100');
          }
        });
      }
    });
  });
</script>