---
import type { CollectionEntry } from 'astro:content';

interface Props {
  entry: CollectionEntry<'work'>;
}

const { entry } = Astro.props;
const showcaseImages = entry.data.images?.showcase || [];
const baseUrl = entry.data.images?.base_url;

// Helper function to build full URL
function buildImageUrl(imagePath: string): string {
  if (baseUrl) {
    // Ensure base_url ends with '/' and imagePath doesn't start with '/'
    const cleanBaseUrl = baseUrl.endsWith('/') ? baseUrl : baseUrl + '/';
    const cleanImagePath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
    return cleanBaseUrl + cleanImagePath;
  }
  return imagePath; // Return as-is if no base_url
}

---

{showcaseImages.length > 0 && (
  <div class="mb-8">
    <div class="flex gap-4 overflow-x-auto pb-4 scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent">
      {showcaseImages.map((image, index) => (
        <div class="flex-shrink-0">
          <img 
            src={buildImageUrl(image.thumbnail || image.full)} 
            alt={image.alt || "Project showcase image"}
            class="h-48 w-auto rounded-lg shadow-md border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-200 cursor-pointer"
            loading="lazy"
            data-full-image={buildImageUrl(image.full)}
            data-image-alt={image.alt || "Project showcase image"}
            data-image-index={index}
            title={image.alt || "Click to view full size"}
          />
        </div>
      ))}
    </div>
  </div>
)}

<!-- Modal -->
<div id="image-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden flex items-center justify-center p-4">
  <div class="relative max-w-4xl max-h-full">
    <!-- Close button -->
    <button 
      id="close-modal" 
      class="absolute -top-12 right-0 text-white hover:text-gray-300 text-2xl font-bold z-10"
      aria-label="Close modal"
    >
      ×
    </button>
    
    <!-- Image container -->
    <div class="relative">
      <img 
        id="modal-image" 
        src="" 
        alt="" 
        class="max-w-full max-h-[80vh] object-contain rounded-lg"
      />
      <p id="modal-caption" class="text-white text-center mt-4 text-sm opacity-90"></p>
    </div>
    
    <!-- Navigation arrows -->
    <button 
      id="prev-image" 
      class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 text-3xl font-bold bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center"
      aria-label="Previous image"
    >
      ‹
    </button>
    <button 
      id="next-image" 
      class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 text-3xl font-bold bg-black bg-opacity-50 rounded-full w-12 h-12 flex items-center justify-center"
      aria-label="Next image"
    >
      ›
    </button>
  </div>
</div>

<script>
  // Modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('image-modal')!;
    const modalImage = document.getElementById('modal-image')! as HTMLImageElement;
    const modalCaption = document.getElementById('modal-caption')! as HTMLParagraphElement;
    const closeModal = document.getElementById('close-modal')! as HTMLButtonElement;
    const prevButton = document.getElementById('prev-image')! as HTMLButtonElement;
    const nextButton = document.getElementById('next-image')! as HTMLButtonElement;
    const showcaseImages = document.querySelectorAll('[data-full-image]');
    
    let currentImageIndex = 0;
    const images = Array.from(showcaseImages);
    
    function showImage(index: number): void {
      const image = images[index];
      const fullImageUrl = image.getAttribute('data-full-image');
      const altText = image.getAttribute('data-image-alt');
      
      if (fullImageUrl) {
        modalImage.src = fullImageUrl;
        modalImage.alt = altText || '';
        modalCaption.textContent = altText || '';
        currentImageIndex = index;
        
        // Show/hide navigation buttons
        prevButton.style.display = index > 0 ? 'flex' : 'none';
        nextButton.style.display = index < images.length - 1 ? 'flex' : 'none';
      }
    }
    
    function openModal(index: number): void {
      showImage(index);
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
    }
    
    function closeModalFunc(): void {
      modal.classList.add('hidden');
      document.body.style.overflow = ''; // Restore scrolling
    }
    
    // Event listeners
    showcaseImages.forEach((img, index) => {
      img.addEventListener('click', () => {
        openModal(index);
      });
    });
    
    closeModal.addEventListener('click', closeModalFunc);
    
    // Close modal when clicking outside the image
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModalFunc();
      }
    });
    
    // Navigation
    prevButton.addEventListener('click', () => {
      if (currentImageIndex > 0) {
        showImage(currentImageIndex - 1);
      }
    });
    
    nextButton.addEventListener('click', () => {
      if (currentImageIndex < images.length - 1) {
        showImage(currentImageIndex + 1);
      }
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (modal.classList.contains('hidden')) return;
      
      switch (e.key) {
        case 'Escape':
          closeModalFunc();
          break;
        case 'ArrowLeft':
          if (currentImageIndex > 0) {
            showImage(currentImageIndex - 1);
          }
          break;
        case 'ArrowRight':
          if (currentImageIndex < images.length - 1) {
            showImage(currentImageIndex + 1);
          }
          break;
      }
    });
  });
</script> 