---
import type { CollectionEntry } from 'astro:content';
import { Quote } from '@lucide/astro';

interface Props {
  entry: CollectionEntry<'work'>;
}

const { entry } = Astro.props;
const reflections = entry.data.reflections;
---

{reflections && (
  <div class="mb-8">
    <button
      id={`reflections-toggle-${entry.id}`}
      class="w-full flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
      aria-expanded="false"
      aria-controls={`reflections-content-${entry.id}`}
    >
      <div class="flex items-center gap-3">
        <Quote class="w-5 h-5 text-gray-600 dark:text-gray-400" />
        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
          Project Reflections
        </span>
      </div>
      <svg 
        class="w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform duration-200" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>
    
    <div 
      id={`reflections-content-${entry.id}`}
      class="hidden mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700"
    >
      <div class="prose prose-sm dark:prose-invert max-w-none">
        <p class="text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-wrap">
          {reflections}
        </p>
      </div>
    </div>
  </div>
)}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons = document.querySelectorAll('[id^="reflections-toggle-"]');
    
    toggleButtons.forEach(button => {
      const contentId = button.getAttribute('aria-controls')!;
      const content = document.getElementById(contentId)!;
      const arrow = button.querySelector('svg')!;
      
      button.addEventListener('click', () => {
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        if (isExpanded) {
          // Collapse
          content.classList.add('hidden');
          button.setAttribute('aria-expanded', 'false');
          arrow.classList.remove('rotate-180');
        } else {
          // Expand
          content.classList.remove('hidden');
          button.setAttribute('aria-expanded', 'true');
          arrow.classList.add('rotate-180');
        }
      });
    });
  });
</script> 