type: "project"

projectName: "HyperTagBrowser"
title: "macOS File Browser with Advanced Tagging System"

startDate: "2024-09"
current: true

githubUrl: "https://github.com/robinsr/hyper-tag-browser"

description: >
  A sophisticated macOS file browser application built with SwiftUI that provides advanced file organization 
  through a comprehensive tagging system. The app features intelligent file indexing, metadata management, and 
  powerful search capabilities, allowing users to organize and discover files through descriptive tags, attribution 
  metadata, and custom work queues.


highlights:
  - Built a native macOS application using SwiftUI and AppKit with a modern, responsive interface featuring grid and table views for file browsing
  - Implemented a sophisticated tagging system with multiple domains including descriptive tags, attributionmetadata (artist, creator, owner), creation dates, and work queues
  - Developed a robust file indexing service using GRDB (SQLite) for persistent storage of file metadata, tags, and relationships
  - Created an intelligent file identification system using extended attributes to maintain unique content IDs across file operations
  - Integrated macOS system services including QuickLook for thumbnail generation, Spotlight for search, and file system monitoring for real-time updates
  - Built a comprehensive search system supporting complex queries with tag-based filtering, date ranges, and full-text search capabilities
  - Implemented a work queue system for batch operations and task management with visual progress tracking
  - Designed a modular architecture with dependency injection using Factory framework for maintainable and testable code
  - Added advanced features including drag-and-drop support, keyboard navigation, context menus, and customizable UI panels
  - Integrated with macOS system features like clipboard operations, file operations (rename, move, trash), and volume management

technologies:
  
  # === Programming Languages ===
  
  - name: "Swift"
    type: "language_tech"
    description: >
      The core programming language used throughout the application for type-safe, performant code with modern
      language features
  
  # === Frameworks & Tools ===
  
  - name: "SwiftUI"
    type: "framework_tooling"
    description: >
      The primary UI framework used to build the modern, responsive interface with declarative syntax and
      automatic state management
  
  - name: "AppKit"
    type: "framework_tooling"
    description: >
      Used for macOS-specific functionality including window management, system integration, and native controls
      not available in SwiftUI
  
  - name: "GRDB (SQLite)"
    type: "framework_tooling"
    description: >
      The database layer providing persistent storage for file metadata, tags, relationships, and search indexes
      with type-safe query building
  
  - name: "QuickLook"
    type: "framework_tooling"
    description: >
      Integrated for automatic thumbnail generation and preview capabilities for various file types including
      images and documents
  
  - name: "Spotlight"
    type: "framework_tooling"
    description: >
      Leveraged for advanced search functionality including full-text search, metadata indexing, and system-wide
      content discovery
  
  - name: "Core Data"
    type: "framework_tooling"
    description: >
      Used for managing complex data relationships and providing a robust object graph for the application's
      data model
  
  - name: "Uniform Type Identifiers"
    type: "framework_tooling"
    description: >
      Utilized for file type identification and categorization to enable proper handling of different content
      types
  
  # === Architecture Patterns ===
  
  - name: "Factory (Dependency Injection)"
    type: "architecture_pattern"
    description: >
      Used to implement a clean dependency injection system for better testability and modular architecture
      design

  # === System Capabilities ===
  
  - name: "File System Monitoring"
    type: "system_capability"
    description: >
      Implemented to watch for file system changes and automatically update the database when files are modified,
      moved, or deleted
  
  - name: "Extended Attributes"
    type: "system_capability"
    description: >
      Used to store unique content IDs on files to maintain identity across file operations and enable robust
      file tracking
  
  - name: "macOS System Integration"
    type: "system_capability"
    description: >
      Integrated with various macOS system services including clipboard, file operations, volume management, and
      system preferences
  
  - name: "Thumbnail Generation"
    type: "system_capability"
    description: >
      Built a custom thumbnail service using QuickLook and caching to provide fast, efficient image previews
      for the file browser
  
  - name: "Search & Filtering"
    type: "system_capability"
    description: >
      Developed a sophisticated search system with tag-based filtering, date ranges, and complex query building
      for efficient file discovery
  
  - name: "Tag Management"
    type: "system_capability"
    description: >
      Created a comprehensive tagging system with multiple domains (descriptive, attribution, creation dates)
      and drag-and-drop support
  
  - name: "Work Queues"
    type: "system_capability"
    description: >
      Implemented a queue system for batch operations and task management with visual progress tracking and
      background processing
  
  - name: "Keyboard Navigation"
    type: "system_capability"
    description: >
      Added extensive keyboard shortcuts and navigation support for power users to efficiently browse and manage
      files
  
  - name: "Drag & Drop"
    type: "system_capability"
    description: >
      Integrated native macOS drag-and-drop functionality for intuitive file operations and tag management

topSkills:
  - name: "Native macOS Development"
    description: >
      Built a fully native application using SwiftUI and AppKit, demonstrating fluency in the Apple development ecosystem 
      and the ability to deliver polished, system-integrated desktop experiences.

  - name: "Advanced Tagging & Metadata Systems"
    description: >
      Designed a rich, multi-domain tagging architecture with support for attribution metadata, file relationships, and 
      persistent identifiers—showcasing strengths in data modeling, search optimization, and user-centric organization tools.

  - name: "Intelligent File Indexing & Search"
    description: >
      Implemented a performant file indexing engine with full-text search, tag-based filtering, and integration with macOS 
      Spotlight and QuickLook—highlighting proficiency in building complex, responsive search systems.

  - name: "Modular Architecture & Dependency Injection"
    description: >
      Applied clean architectural principles using the Factory DI framework, enabling scalable, testable codebases—
      a strong signal of senior-level software design maturity.

  - name: "macOS System Integration"
    description: >
      Integrated deeply with system services including file monitoring, clipboard, QuickLook, and drag-and-drop—demonstrating 
      the ability to leverage platform capabilities for enhanced user experience and reliability.


images:
  base_url: "https://raw.githubusercontent.com/robinsr/hyper-tag-browser/main/screenshots"
  # base_url: "./tmp-hypertag-screenshots/screenshots"
  
  primary:
    full: "010-hypertagbrowser-browse-main.png"
    thumbnail: "thumbs/010-hypertagbrowser-browse-main.png"
    alt: "HyperTagBrowser Browse Screen"
  
  showcase:
    
    - full: "010-hypertagbrowser-browse-main.png"
      thumbnail: "thumbs/010-hypertagbrowser-browse-main.png"
      alt: >
        1. The file browser is relatively intuitive, mirroring the Finder's layout and behavior.

    - full: "011-hypertagbrowser-browse-cursor-single.png"
      thumbnail: "thumbs/011-hypertagbrowser-browse-cursor-single.png"
      alt: >
        2. Item selection using mouse or keyboard navigation

    - full: "012-hypertagbrowser-browse-cursor-multi-item.png"
      thumbnail: "thumbs/012-hypertagbrowser-browse-cursor-multi-item.png"
      alt: >
        3. Multi-item selection supported using mouse or shift + arrow keys

    - full: "013-hypertagbrowser-browse-refinements.png"
      thumbnail: "thumbs/013-hypertagbrowser-browse-refinements.png"
      alt: >
        4. ⌃+F opens the Refinements panel, which can be used to filter the file browser by tag, date, and more.

    - full: "014-hypertagbrowser-browse-refinements-applied.png"
      thumbnail: "thumbs/014-hypertagbrowser-browse-refinements-applied.png"
      alt: >
        5. Refinements can be applied to the file browser, including filtering by tag, date, and more.

    - full: "015-hypertagbrowser-browser-refine-not-filter.png"
      thumbnail: "thumbs/015-hypertagbrowser-browser-refine-not-filter.png"
      alt: >
        6. Individual refinements can be toggled as inclusive or exclusive.

    - full: "016-hypertagbrowser-stashed-tags.png"
      thumbnail: "thumbs/016-hypertagbrowser-stashed-tags.png"
      alt: >
        7. The Tag Stash panel can be used to build sets of tags to be applied simultaneously to multiple items.

    - full: "020-hypertagbrowser-search-sheet-main.png"
      thumbnail: "thumbs/020-hypertagbrowser-search-sheet-main.png"
      alt: >
        8. The Search Sheet has more free-form search capabilities, with a simple DSL for building complex queries
        across tags, dates, creators, and filenames.

    - full: "030-hypertagbrowser-browse-tag-sheet-search.png"
      thumbnail: "thumbs/030-hypertagbrowser-browse-tag-sheet-search.png"
      alt: >
        9. ⌘+T displays the 'Tag Sheet' for an item, presenting a UI for managing item tag associations
        including a search field for finding existing tags and a keyboard-scrollable list of the 
        current tag associations. Pressing ↵ toggles a tag association, allowing users to construct
        the set of tags for an item or items, with changes only being applied when the user exits the sheet.

    - full: "030-hypertagbrowser-browse-tag-sheet-multi-item.png"
      thumbnail: "thumbs/030-hypertagbrowser-browse-tag-sheet-multi-item.png"
      alt: >
        10. The Tag Sheet supports editing associations for multiple items at once. Only common tag associations
        are shown, and any edits to the tag associations are applied to all selected items. Item's unique
        tags (omitted from the Tag Sheet) are preserved.

    - full: "040-hypertagbrowser-detail-main-dark.png"
      thumbnail: "thumbs/040-hypertagbrowser-detail-main-dark.png"
      alt: >
        11. The item detail screen shows the item's metadata, including tags, dates, and more.

    # Composite light/dark mode image missing transparency - cant figure out the right imagemagick command to make it work
    # - full: "040-hypertagbrowser-detail-main-diagonal.png"
    #   thumbnail: "thumbs/040-hypertagbrowser-detail-main-diagonal.png"
    #   alt: >
    #     tbd — 040-hypertagbrowser-detail-main-diagonal.png

    - full: "040-hypertagbrowser-detail-main-light.png"
      thumbnail: "thumbs/040-hypertagbrowser-detail-main-light.png"
      alt: >
        12. HyperTagBrowser supports dark and light mode.

    - full: "040-hypertagbrowser-details-file-rename.png"
      thumbnail: "thumbs/040-hypertagbrowser-details-file-rename.png"
      alt: >
        13. The item detail screen supports renaming the item.

    - full: "040-hypertagbrowser-details-inspector-2.png"
      thumbnail: "thumbs/040-hypertagbrowser-details-inspector-2.png"
      alt: >
        14. The item detail screen supports a variety of actions, including renaming, moving, and deleting the item.

    - full: "040-hypertagbrowser-details-tag-context-menu-recategorize.png"
      thumbnail: "thumbs/040-hypertagbrowser-details-tag-context-menu-recategorize.png"
      alt: >
        15. The item detail screen supports recategorizing a tag association, essentially changing the the meaning
        of the tag association (eg, a keyword association, a creator association, etc.)

    - full: "040-hypertagbrowser-details-tag-context-menu.png"
      thumbnail: "thumbs/040-hypertagbrowser-details-tag-context-menu.png"
      alt: >
        16. Various actions on a tag or tag association can be performed from the context menu.

    - full: "040-hypertagbrowser-details-tag-sheet.png"
      thumbnail: "thumbs/040-hypertagbrowser-details-tag-sheet.png"
      alt: >
        17. The Tag Sheet is also accessible from the item detail screen.

    - full: "080-hypertagbrowser-settings-general.png"
      thumbnail: "thumbs/080-hypertagbrowser-settings-general.png"
      alt: >
        18. The Settings screen showing some general user preferences.

    - full: "081-hypertagbrowser-settings-appearance.png"
      thumbnail: "thumbs/081-hypertagbrowser-settings-appearance.png"
      alt: >
        19. The Settings screen supports changing the app's appearance.

    - full: "090-hypertagbrowser-key-shortcuts.png"
      thumbnail: "thumbs/090-hypertagbrowser-key-shortcuts.png"
      alt: >
        20. A help screen showing the keyboard shortcuts.


draft_reflections: >
  This project started as an exploration of macOS development and quickly grew into a deep dive 
  into file systems, metadata indexing, and native app architecture. I wanted to build a power-user 
  tool that felt truly native—fast, keyboard-driven, and tightly integrated with macOS. The tagging 
  system evolved out of my own frustration with Finder’s limitations, and implementing extended 
  attributes and persistent content IDs was both technically challenging and satisfying.

  One of the most eye-opening aspects of the project was working directly with a local database. 
  In most modern web services and frontend apps, you rarely touch the data layer directly—you’re 
  calling APIs or operating on abstractions. Here, I used GRDB with SQLite to build a custom schema 
  from scratch, and was surprised at how few options exist for serious native app data storage: 
  Core Data, SwiftData, or hand-rolled SQLite. Schema evolution turned out to be particularly tricky— 
  especially when preserving existing user data across updates. I had to get creative around workarounds 
  for limitations like SQLite’s inability to alter certain constraints post-creation, which gave me a 
  deeper respect for the stability and migration tooling we take for granted in other ecosystems.

  This project pushed me to think more like a product engineer than just a developer: What would make 
  this genuinely useful? How should tagging feel? How should batch operations work without being overwhelming? 
  I also got to sharpen my understanding of SwiftUI and dependency injection patterns, and I’m proud of how 
  the app turned out—it feels like something I’d want to use every day. I plan to keep refining it and may 
  eventually extend it to sync or export features across devices.