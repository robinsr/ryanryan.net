type: "project"

projectName: "CWMoto Racing Team Website"
title: "Full-Stack E-commerce & Racing Team Platform"

startDate: "2023-01"
endDate: "2024-02"
current: false

description: >
  A comprehensive website for CWMoto, a PNW-based professional road racing team and 
  performance shop. The platform serves dual purposes: showcasing the racing team and 
  sponsors while providing e-commerce functionality for motorcycle parts and services. 
  Built with modern web technologies to deliver a fast, responsive experience that 
  effectively funnels visitors toward the two primary revenue streams: race sponsorship 
  and suspension services.

githubUrl: "https://github.com/CW-Moto/website"
liveUrl: "https://www.cwmoto.com"

highlights:
  - Built a full-stack e-commerce platform using Astro with TypeScript, integrating Shopify's Storefront API for product management and cart functionality
  - Implemented a sophisticated architecture with tRPC for end-to-end type safety and seamless frontend-backend communication, eliminating the need for traditional REST endpoints
  - Created a dual-purpose website that serves both the racing team's sponsorship needs and the shop's e-commerce requirements with unified branding
  - Developed a responsive, mobile-first design optimized for users accessing the site  from race paddocks and mobile devices
  - Integrated calendar functionality to display race events and team schedules with automatic image association based on event location
  - Built a content management system using Astro Content Collections for blog posts, team information, and sponsor content
  - Implemented user session management with Redis for secure authentication and cart persistence
  - Created a modular component architecture with reusable UI elements for consistent design patterns
  - Set up comprehensive testing with Vitest for unit tests and Playwright for end-to-end testing
  - Deployed with Docker containerization for consistent development and production environments
  - Configured automated deployment pipeline with Railway, including health checks and automatic restart policies for high availability

technologies:
  
  # === Programming Languages ===
  
  - name: "TypeScript"
    type: "language_tech"
    description: |
      Used throughout the codebase for type safety and better developer experience across frontend and backend
  
  # === Frameworks & Tools ===
  
  - name: "Astro"
    type: "framework_tooling"
    description: |
      The primary static site generator and framework used for building the website with server-side rendering
      capabilities
  
  - name: "tRPC"
    type: "framework_tooling"
    description: |
      Implemented for end-to-end type safety between frontend and backend, providing RPC-style API calls with full
      IntelliSense support
  
  - name: "Shopify Storefront API"
    type: "framework_tooling"
    description: |
      Integrated for e-commerce functionality including product catalog, cart management, and checkout processes
  
  - name: "Tailwind CSS"
    type: "framework_tooling"
    description: |
      Used for styling the entire website with utility-first CSS framework for rapid development and consistent design
  
  - name: "Alpine.js"
    type: "framework_tooling"
    description: |
      Lightweight JavaScript framework for handling interactive elements on the frontend without the overhead of
      larger frameworks
  
  - name: "Node.js"
    type: "framework_tooling"
    description: |
      The runtime environment for the backend server and API endpoints

  # === Infrastructure & Platforms ===
  
  - name: "Nixpacks"
    type: "framework_tooling"
    description: |
      Build system used by Railway to automatically detect and build the application from source code
  
  - name: "Zod"
    type: "framework_tooling"
    description: |
      TypeScript-first schema validation library used for form validation and API request/response validation
  
  - name: "Playwright"
    type: "framework_tooling"
    description: |
      End-to-end testing framework used for automated browser testing to ensure website functionality
  
  - name: "Vitest"
    type: "framework_tooling"
    description: |
      Unit testing framework used for testing individual components and utility functions
  
  # === Infrastructure & Platforms ===

  - name: "Redis"
    type: "infra_platform"
    description: |
      Used for user session management and cart persistence, providing fast in-memory data storage
  
  - name: "Docker"
    type: "infra_platform"
    description: |
      Containerization platform used for consistent development and production deployment environments
  
  - name: "Railway"
    type: "infra_platform"
    description: |
      Cloud platform used for automated deployment with built-in health checks and restart policies
  
  # === Engineering Practices ===

  - name: "Responsive Design"
    type: "engineering_practice"
    description: |
      Mobile-first design approach ensuring the website works seamlessly across all device sizes
  
  - name: "Mobile-First Development"
    type: "engineering_practice"
    description: |
      Development methodology prioritizing mobile experience, crucial for users accessing the site from race paddocks
  
  - name: "CI/CD Pipeline"
    type: "engineering_practice"
    description: |
      Automated deployment pipeline that builds, tests, and deploys the application to production
  
  # === Architecture Patterns ===

  - name: "GraphQL"
    type: "architecture_pattern"
    description: |
      Used for communicating with Shopify's APIs, providing efficient data fetching and real-time updates
  
  - name: "Content Collections"
    type: "architecture_pattern"
    description: |
      Astro's content management system used for organizing blog posts, team information, and sponsor content
  
  - name: "Server-Side Rendering"
    type: "architecture_pattern"
    description: |
      Implemented for optimal performance and SEO, with pages pre-rendered at build time where possible
  
  # === System Capabilities ===

  - name: "E-commerce Integration"
    type: "system_capability"
    description: |
      Complete integration with Shopify for product management, inventory, and payment processing


topSkills:
  - name: "Full-Stack Web Development"
    description: >
      Built an end-to-end web platform combining modern frontend frameworks with backend services, session management, and infrastructure deployment—demonstrating fluency across the stack and real-world product delivery experience.

  - name: "E-commerce Integration"
    description: >
      Integrated a custom storefront with Shopify’s Storefront API, including dynamic product rendering, cart management, and secure checkout—showcasing applied experience in digital commerce and API-based systems.

  - name: "End-to-End Type Safety"
    description: >
      Leveraged tRPC and TypeScript to enforce strict contracts between frontend and backend layers, enabling faster development and fewer runtime errors—an example of modern engineering practices for scalable web systems.

  - name: "Performance-Optimized Responsive Design"
    description: >
      Delivered a mobile-first experience tailored to on-the-go users with server-side rendering and fast-loading pages—emphasizing attention to user context, performance, and accessibility.

  - name: "CI/CD & Cloud Deployment"
    description: >
      Automated build, test, and deploy workflows using Docker and Railway for consistent and high-availability deployments—highlighting production-readiness and DevOps fluency.